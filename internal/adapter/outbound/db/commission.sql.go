// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: commission.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommissionWork = `-- name: CreateCommissionWork :one
INSERT INTO commission_works (
  requester_nickname,
  plot_id,
  task_type,
  task_description,
  credit_cost
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, requester_nickname, plot_id, task_type, task_description, status, credit_cost, requested_at, completed_at
`

type CreateCommissionWorkParams struct {
	RequesterNickname string      `json:"requester_nickname"`
	PlotID            int32       `json:"plot_id"`
	TaskType          string      `json:"task_type"`
	TaskDescription   pgtype.Text `json:"task_description"`
	CreditCost        int32       `json:"credit_cost"`
}

func (q *Queries) CreateCommissionWork(ctx context.Context, arg CreateCommissionWorkParams) (CommissionWork, error) {
	row := q.db.QueryRow(ctx, createCommissionWork,
		arg.RequesterNickname,
		arg.PlotID,
		arg.TaskType,
		arg.TaskDescription,
		arg.CreditCost,
	)
	var i CommissionWork
	err := row.Scan(
		&i.ID,
		&i.RequesterNickname,
		&i.PlotID,
		&i.TaskType,
		&i.TaskDescription,
		&i.Status,
		&i.CreditCost,
		&i.RequestedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteCommissionWork = `-- name: DeleteCommissionWork :exec
DELETE FROM commission_works
WHERE id = $1
`

func (q *Queries) DeleteCommissionWork(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCommissionWork, id)
	return err
}

const getCommissionWork = `-- name: GetCommissionWork :one
SELECT id, requester_nickname, plot_id, task_type, task_description, status, credit_cost, requested_at, completed_at FROM commission_works
WHERE id = $1
`

func (q *Queries) GetCommissionWork(ctx context.Context, id int32) (CommissionWork, error) {
	row := q.db.QueryRow(ctx, getCommissionWork, id)
	var i CommissionWork
	err := row.Scan(
		&i.ID,
		&i.RequesterNickname,
		&i.PlotID,
		&i.TaskType,
		&i.TaskDescription,
		&i.Status,
		&i.CreditCost,
		&i.RequestedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listCommissionWorksByRequester = `-- name: ListCommissionWorksByRequester :many
SELECT id, requester_nickname, plot_id, task_type, task_description, status, credit_cost, requested_at, completed_at FROM commission_works
WHERE requester_nickname = $1
ORDER BY requested_at DESC
`

func (q *Queries) ListCommissionWorksByRequester(ctx context.Context, requesterNickname string) ([]CommissionWork, error) {
	rows, err := q.db.Query(ctx, listCommissionWorksByRequester, requesterNickname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommissionWork{}
	for rows.Next() {
		var i CommissionWork
		if err := rows.Scan(
			&i.ID,
			&i.RequesterNickname,
			&i.PlotID,
			&i.TaskType,
			&i.TaskDescription,
			&i.Status,
			&i.CreditCost,
			&i.RequestedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommissionWorksByRequesterAndStatus = `-- name: ListCommissionWorksByRequesterAndStatus :many
SELECT id, requester_nickname, plot_id, task_type, task_description, status, credit_cost, requested_at, completed_at FROM commission_works
WHERE requester_nickname = $1 AND status = $2
ORDER BY requested_at DESC
`

type ListCommissionWorksByRequesterAndStatusParams struct {
	RequesterNickname string `json:"requester_nickname"`
	Status            string `json:"status"`
}

func (q *Queries) ListCommissionWorksByRequesterAndStatus(ctx context.Context, arg ListCommissionWorksByRequesterAndStatusParams) ([]CommissionWork, error) {
	rows, err := q.db.Query(ctx, listCommissionWorksByRequesterAndStatus, arg.RequesterNickname, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommissionWork{}
	for rows.Next() {
		var i CommissionWork
		if err := rows.Scan(
			&i.ID,
			&i.RequesterNickname,
			&i.PlotID,
			&i.TaskType,
			&i.TaskDescription,
			&i.Status,
			&i.CreditCost,
			&i.RequestedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommissionWorksByStatus = `-- name: ListCommissionWorksByStatus :many
SELECT id, requester_nickname, plot_id, task_type, task_description, status, credit_cost, requested_at, completed_at FROM commission_works
WHERE status = $1
ORDER BY requested_at DESC
`

func (q *Queries) ListCommissionWorksByStatus(ctx context.Context, status string) ([]CommissionWork, error) {
	rows, err := q.db.Query(ctx, listCommissionWorksByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommissionWork{}
	for rows.Next() {
		var i CommissionWork
		if err := rows.Scan(
			&i.ID,
			&i.RequesterNickname,
			&i.PlotID,
			&i.TaskType,
			&i.TaskDescription,
			&i.Status,
			&i.CreditCost,
			&i.RequestedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommissionWorkStatus = `-- name: UpdateCommissionWorkStatus :one
UPDATE commission_works
SET status = $2
WHERE id = $1
RETURNING id, requester_nickname, plot_id, task_type, task_description, status, credit_cost, requested_at, completed_at
`

type UpdateCommissionWorkStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateCommissionWorkStatus(ctx context.Context, arg UpdateCommissionWorkStatusParams) (CommissionWork, error) {
	row := q.db.QueryRow(ctx, updateCommissionWorkStatus, arg.ID, arg.Status)
	var i CommissionWork
	err := row.Scan(
		&i.ID,
		&i.RequesterNickname,
		&i.PlotID,
		&i.TaskType,
		&i.TaskDescription,
		&i.Status,
		&i.CreditCost,
		&i.RequestedAt,
		&i.CompletedAt,
	)
	return i, err
}
