// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: farm_plots.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPlot = `-- name: GetPlot :one
SELECT id, name, location, size_sqm, monthly_rent, crop_type, status, created_at FROM farm_plots
WHERE id = $1
`

func (q *Queries) GetPlot(ctx context.Context, id int32) (FarmPlot, error) {
	row := q.db.QueryRow(ctx, getPlot, id)
	var i FarmPlot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.SizeSqm,
		&i.MonthlyRent,
		&i.CropType,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAvailablePlots = `-- name: ListAvailablePlots :many
SELECT id, name, location, size_sqm, monthly_rent, crop_type, status, created_at FROM farm_plots
WHERE status = 'available'
ORDER BY monthly_rent ASC
`

func (q *Queries) ListAvailablePlots(ctx context.Context) ([]FarmPlot, error) {
	rows, err := q.db.Query(ctx, listAvailablePlots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FarmPlot{}
	for rows.Next() {
		var i FarmPlot
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.SizeSqm,
			&i.MonthlyRent,
			&i.CropType,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlotsByCrop = `-- name: ListPlotsByCrop :many
SELECT id, name, location, size_sqm, monthly_rent, crop_type, status, created_at FROM farm_plots
WHERE crop_type = $1 AND status = 'available'
ORDER BY monthly_rent ASC
`

func (q *Queries) ListPlotsByCrop(ctx context.Context, cropType pgtype.Text) ([]FarmPlot, error) {
	rows, err := q.db.Query(ctx, listPlotsByCrop, cropType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FarmPlot{}
	for rows.Next() {
		var i FarmPlot
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.SizeSqm,
			&i.MonthlyRent,
			&i.CropType,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlotStatus = `-- name: UpdatePlotStatus :one
UPDATE farm_plots
SET status = $2
WHERE id = $1
RETURNING id, name, location, size_sqm, monthly_rent, crop_type, status, created_at
`

type UpdatePlotStatusParams struct {
	ID     int32       `json:"id"`
	Status pgtype.Text `json:"status"`
}

func (q *Queries) UpdatePlotStatus(ctx context.Context, arg UpdatePlotStatusParams) (FarmPlot, error) {
	row := q.db.QueryRow(ctx, updatePlotStatus, arg.ID, arg.Status)
	var i FarmPlot
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.SizeSqm,
		&i.MonthlyRent,
		&i.CropType,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
